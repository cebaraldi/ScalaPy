/*
    // Global Scope
    val list = py.Dynamic.global.range(1, 3 + 1)
    val listSum = py.Dynamic.global.sum(list)
    println(s"Global Scope: listSum = ${listSum}")

    py.local { // python local scope
      val user = "anonymous"
      val pass = "guest"
      val server = "opendata.dwd.de"
//      val local = "/media/datalake/dwd"
      val local = "."
      val remote =
        "climate_environment/CDC/observations_germany/climate/daily/kl"

      val os = py.module("os")
      os.chdir(local)

      val ftp = py.module("ftputil")
      py.`with`(ftp.FTPHost(server, user, pass)) { host =>
        host.chdir(remote)
        host.chdir("recent")
        val files = host.listdir(host.curdir) // [11:22].toPythonCopy
//        println(files)
        println(files.getClass)

//        for x in files:
//          print(x)

        val f = files.bracketAccess(11)

        val d = host.download_if_newer(f, f)
        println(s"downloaded ${f}")
        println(d)
      }

      val list = py.Dynamic.global.range(1, 3 + 1)
      val listSum = py.Dynamic.global.sum(list)

      // Scala-Python Conversions
      val mySeqToCopy = Seq(Seq(1, 2), Seq(3))
      println(mySeqToCopy.length)
      for (x <- mySeqToCopy) println(x)

      val mySeqToProxy = Array(1, 2, 3, 4, 5)
      println(mySeqToProxy.length)
      mySeqToProxy(2) = 100
      for (x <- mySeqToProxy) println(x)

      import scala.collection.mutable
      val myPythonList = py.Dynamic.global.list(py.Dynamic.global.range(10))
      // myPythonList: py.Dynamic = [200, 1, 2, 3, 4, 5, 6, 7, 8, 9]

      val copyLoad = myPythonList.as[Vector[Int]]
      // copyLoad: Vector[Int] = Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
      val proxyLoad = myPythonList.as[mutable.Seq[Int]]
      // proxyLoad: mutable.Seq[Int] = Seq(200, 1, 2, 3, 4, 5, 6, 7, 8, 9)

      println(copyLoad)
      // Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
      println(proxyLoad)
      // Seq(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

      myPythonList.bracketUpdate(0, 100)

      println(copyLoad)
      // Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
      println(proxyLoad)
      // Seq(100, 1, 2, 3, 4, 5, 6, 7, 8, 9)

      proxyLoad(0) = 200

      println(myPythonList)
      // [200, 1, 2, 3, 4, 5, 6, 7, 8, 9]

      // Custom Python Snippets
      import py.PyQuote
      val mappedList = py.Dynamic.global.list(
        py"map(lambda elem: elem + 1, ${Seq(1, 2, 3).toPythonProxy})"
      )
      // mappedList: py.Dynamic = [2, 3, 4]

      println(py.eval("1 + 2"))
      // res11: py.Dynamic = 3
 */

     /*
       // Special Python Syntax
       val myFile = py.Dynamic.global.open("../README.md")
       // myFile: py.Dynamic = <_io.TextIOWrapper name='../README.md' mode='r' encoding='UTF-8'>
       py.`with`(myFile) { file =>
         println(file.encoding.as[String])
       }
       // UTF-8
  */

        // Zoned Memory Management
        py.local {
          (1 to 1000).foreach { _ =>
            py.Dynamic.global.len(Seq(1, 2, 3).toPythonCopy)
          }
      }